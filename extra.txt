require('dotenv').config();


const express = require('express');
const mongoose = require('mongoose');
const path = require('path');
const twilio = require('twilio');

const port = process.env.PORT;

// Mongoose models assumed


// Twilio Credentials
const twilioAccountSid = process.env.TWILIO_ACCOUNT_SID;
const twilioAuthToken = process.env.TWILIO_AUTH_TOKEN;
const twilioClient = twilio(twilioAccountSid, twilioAuthToken);
const twilioPhoneNumber = process.env.TWILIO_PHONE_NUMBER;

// Initialize Express app
const app = express();

// Middleware to parse JSON and URL encoded bodies
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

//verify admin
function verifyAdminPassword(req, res, next) {
    const adminPassword = process.env.ADMIN_PASSWORD;
    const password = req.body.adminPassword || req.query.adminPassword;

    if (!password || password !== adminPassword) {
        return res.status(401).send('<script>alert("Unauthorized: Invalid admin password."); window.location.href="/";</script>');
    }

    next();
}


// Connect to MongoDB
mongoose.connect(process.env.MONGODB_URI, {
    useNewUrlParser: true,
    useUnifiedTopology: true
});

const db = mongoose.connection;
db.on('error', console.error.bind(console, 'MongoDB connection error:'));
db.once('open', () => {
    console.log('Connected to MongoDB SUCCESSFULLY');
});

// --- Define Schemas and Models ---

const UserSchema = new mongoose.Schema({
    Username: { type: String, required: true },
    Email: { type: String, required: true, unique: true },
    PlayerID: { type: Number, required: true, unique: true },
    Age: { type: Number, required: true },
    State: { type: String, required: true },
    Password: { type: String, required: true },
    Phone: { type: String, required: true }
});
const Players = mongoose.model("Players", UserSchema);

const BGMIData = new mongoose.Schema({
    BGMI_Team_name: { type: String, required: true },
    Player_ID: { type: Number, required: true, unique: true },
    BGMI_Team_ID: { type: Number, required: true, unique: true },
    Phone: { type: String, required: true }
});
const BGMIteam = mongoose.model("BGMIteam", BGMIData);

const CSGOData = new mongoose.Schema({
    CSGO_Team_name: { type: String, required: true },
    Player_ID: { type: Number, required: true, unique: true },
    CSGO_Team_ID: { type: Number, required: true, unique: true },
    Phone: { type: String, required: true }
});
const CSGOteam = mongoose.model("CSGOteam", CSGOData);

const RESData = new mongoose.Schema({
    Trnt_ID: { type: Number, required: true, unique: true },
    BG_wnr_ID: { type: Number, required: false },
    CS_wnr_ID: { type: Number, required: false },
    BG_wnr_phone: { type: String, required: false },
    CS_wnr_phone: { type: String, required: false }
});
const Results = mongoose.model("Results", RESData);


// --- SMS Sending Function ---

function sendSMS(phone, message) {
    let formattedPhone = phone.trim();
    if (!formattedPhone.startsWith('+')) {
        formattedPhone = '+91' + formattedPhone;  // Adjust country code if needed
    }

    twilioClient.messages
  .create({
    body: message,
    from: twilioPhoneNumber,
    to: formattedPhone
  })
  .then(msg => console.log(`SMS sent to ${formattedPhone} with SID: ${msg.sid}`))
  .catch(err => console.error(`Failed to send SMS to ${formattedPhone}:`, err));
}

// --- Serve static files ---
app.use(express.static(path.join(__dirname, 'Esports')));

// --- Routes ---

// Home route serving your main form
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'Esports', 'form.html'));
});

// Player Registration Backend
app.post('/post', async (req, res) => {
    const { Username, Email, PlayerID, Age, State, Password, Phone } = req.body;
    const player = new Players({
        Username,
        Email,
        PlayerID,
        Age,
        State,
        Password,
        Phone
    });

    try {
        await player.save();
        console.log(player);
        res.send('<script>alert("Player registered successfully"); window.location.href = "/";</script>');
    } catch (error) {
        if (error.code === 11000) {
            console.log('Email or PlayerID already exists');
            res.send('<script>alert("Email or PlayerID already registered Cannot LOGIN"); window.location.href = "/";</script>');
        } else {
            console.error('Error creating player:', error);
            res.send('<script>alert("Error registering player"); window.location.href = "/";</script>');
        }
    }
});

// BGMI registration backend
app.get('/bgmi_post', (req, res) => {
    res.sendFile(path.join(__dirname, 'Esports', 'bgmi_regist.html'));
});

app.post('/bgmi_post', async (req, res) => {
    const { BGMI_Team_name, Player_ID, BGMI_Team_ID, Phone } = req.body;

    try {
        const player = await Players.findOne({ PlayerID: Number(Player_ID) });
        if (!player) {
            console.log('Player not registered');
            return res.send('<script>alert("Player not registered"); window.location.href = "/bgmi_regist.html";</script>');
        }

        // Check if phone number matches the registered player
        if (player.Phone !== Phone) {
            console.log('Phone number mismatch for Player ID');
            return res.send('<script>alert("Phone number does not match the registered Player ID"); window.location.href = "/bgmi_regist.html";</script>');
        }

        const BGMI = new BGMIteam({
            BGMI_Team_name,
            Player_ID: Number(Player_ID),
            BGMI_Team_ID: Number(BGMI_Team_ID),
            Phone
        });

        await BGMI.save();
        console.log(BGMI);
        res.send('<script>alert("Team registered successfully"); window.location.href = "/index.html";</script>');
    } catch (error) {
        if (error.code === 11000) {
            console.log('Player_ID or BGMI_Team_ID already exists');
            res.send('<script>alert("Player_ID or BGMI_Team_ID already registered"); window.location.href = "/bgmi_regist.html";</script>');
        } else {
            console.error('Error creating team:', error);
            res.send('<script>alert("Error registering team"); window.location.href = "/bgmi_regist.html";</script>');
        }
    }
});

// CSGO Registration Backend
app.get('/csgo_post', (req, res) => {
    res.sendFile(path.join(__dirname, 'Esports', 'csgo_regist.html'));
});

app.post('/csgo_post', async (req, res) => {
    const { CSGO_Team_name, Player_ID, CSGO_Team_ID, Phone } = req.body;

    try {
        const player = await Players.findOne({ PlayerID: Number(Player_ID) });
        if (!player) {
            console.log('Player not registered');
            return res.send('<script>alert("Player not registered"); window.location.href = "/csgo_regist.html";</script>');
        }

        // Check if phone number matches the registered player
        if (player.Phone !== Phone) {
            console.log('Phone number mismatch for Player ID');
            return res.send('<script>alert("Phone number does not match the registered Player ID"); window.location.href = "/csgo_regist.html";</script>');
        }

        const CSGO = new CSGOteam({
            CSGO_Team_name,
            Player_ID: Number(Player_ID),
            CSGO_Team_ID: Number(CSGO_Team_ID),
            Phone
        });

        await CSGO.save();
        console.log(CSGO);
        res.send('<script>alert("Team registered successfully"); window.location.href = "/index.html";</script>');
    } catch (error) {
        if (error.code === 11000) {
            console.log('Player_ID or CSGO_Team_ID already exists');
            res.send('<script>alert("Player_ID or CSGO_Team_ID already registered"); window.location.href = "/csgo_regist.html";</script>');
        } else {
            console.error('Error creating team:', error);
            res.send('<script>alert("Error registering team"); window.location.href = "/csgo_regist.html";</script>');
        }
    }
});

// GET - Show form
app.get('/Create_bgmi_result', (req, res) => {
    res.sendFile(path.join(__dirname, 'Esports', 'bgmi_result.html'));
});
app.get('/Create_csgo_result', (req, res) => {
    res.sendFile(path.join(__dirname, 'Esports', 'csgo_result.html'));
});

// POST - Handle BGMI result
app.post('/Create_bgmi_result',verifyAdminPassword, async (req, res) => {
    const { Trnt_ID, bgmi_wnr, bgmi_phone } = req.body;

    try {
        const team = await BGMIteam.findOne({ BGMI_Team_ID: Number(bgmi_wnr), Phone: bgmi_phone });
        if (!team) {
            return res.send('<script>alert("Invalid BGMI Team ID or Phone."); window.location.href="/Create_bgmi_result";</script>');
        }

        // Upsert: update if exists, or create new
        const result = await Results.findOneAndUpdate(
            { Trnt_ID: Number(Trnt_ID) },
            {
                $set: {
                    BG_wnr_ID: Number(bgmi_wnr),
                    BG_wnr_phone: bgmi_phone
                }
            },
            { upsert: true, new: true, setDefaultsOnInsert: true }
        );

        sendSMS(bgmi_phone, `Congrats! Your BGMI team with ID ${bgmi_wnr} won Tournament ${Trnt_ID}`);

        res.send('<script>alert("BGMI result saved and SMS sent."); window.location.href="/index.html";</script>');
    } catch (err) {
        console.error(err);
        res.send('<script>alert("Error saving result."); window.location.href="/Create_bgmi_result";</script>');
    }
});
// POST - Handle CSGO result
app.post('/Create_csgo_result',verifyAdminPassword, async (req, res) => {
    const { Trnt_ID, csgo_wnr, csgo_phone } = req.body;

    try {
        const team = await CSGOteam.findOne({ CSGO_Team_ID: Number(csgo_wnr), Phone: csgo_phone });
        if (!team) {
            return res.send('<script>alert("Invalid CSGO Team ID or Phone."); window.location.href="/Create_csgo_result";</script>');
        }

        // Upsert: update if exists, or create new
        const result = await Results.findOneAndUpdate(
            { Trnt_ID: Number(Trnt_ID) },
            {
                $set: {
                    CS_wnr_ID: Number(csgo_wnr),
                    CS_wnr_phone: csgo_phone
                }
            },
            { upsert: true, new: true, setDefaultsOnInsert: true }
        );

        sendSMS(csgo_phone, `Congrats! Your CSGO team with ID ${csgo_wnr} won Tournament ${Trnt_ID}`);

        res.send('<script>alert("CSGO result saved and SMS sent."); window.location.href="/index.html";</script>');
    } catch (err) {
        console.error(err);
        res.send('<script>alert("Error saving result."); window.location.href="/Create_csgo_result";</script>');
    }
});

// Start the server
app.listen(port, () => {
    console.log(`Server is running at http://localhost:${port}`);
});


index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Esports India | Home</title>
    <link rel="stylesheet" href="styles.css">
    <link href="https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@400;600&display=swap" rel="stylesheet">
    <link href="https://unpkg.com/aos@2.3.1/dist/aos.css" rel="stylesheet">
</head>
<body>
    <div class="wrapper">
        <div class="nav">
            <div class="logo">
                <h4>Esports.in</h4>
            </div>
            <div class="links">
                <a href="#" class="mainlink">Home</a>
                <a href="#about">About</a>
                <a href="/admin/result_for_user">Results</a>
            </div>
        </div>

        <!-- LANDING PAGE -->

        <div class="landing">
            <div class="landingText" data-aos="fade-up" data-aos-duration="1000">
                <h1>E-sports<span style="color:#e0501b;font-size: 4vw"> in India</span> </h1>
                <div class="btn">
                    <a href="#about">Learn More</a>
                </div>
            </div>
            <div class="landingImage" data-aos="fade-down" data-aos-duration="2000">
                <img src="img/gma.png" alt="">
            </div>
        </div>

        <!-- ABOUT SECTION -->

        <div class="about" id="about">
            <div class="aboutText" data-aos="fade-up" data-aos-duration="1000">
                <h1>E-sports in India</h1>
                <img src="img/gma2.png" style="width: 500px; height: 500px;" alt="">
            </div>
            <div class="aboutList" data-aos="fade-left" data-aos-duration="1000">
                <ol>
                    <li> 
                        <span>01</span>
                         <p>It is no suprise that the esports scene in India is also on the rise. BGMI, Call Of Duty, Tekken 7, DOTA2, FIFA are amongst the more popular esports in India</p>
                    </li>
                    <li> 
                        <span>02</span>
                         <p>The year 2022 has perhaps been the most exciting year for gaming and esporst enthusiasts globally. with esports growing prominence, the world witnessed the first ever Commonwealth Esports Championship.</p>
                    </li>
                    <li> 
                        <span>03</span>
                         <p>Leading brands and advertisers are collaborating with eSports platforms and tournaments to make the most of this growing space. In 2020, LetsGameNow collaborated with flipkart for the Pro Gaming Showdown Tournament, and NODWIN gaming partnered with airtel to launch the Airtel India Esports Tour, a national ranking and award system for Indian esports players.</p>
                    </li>
                    <li> 
                        <span>04</span>
                         <p>India saw esports players double from 300,000 in 2020 to 600,000 in 2021, with revenue growing by 29% from Rs.7.5 Billion in 2020 to Rs. 9.7 Billon in 2021.</p>
                    </li>
                </ol>
            </div>
        </div>

        <!-- INFO SECTION -->

        <div class="infoSection" id="info">
            <div class="infoHeader" data-aos="fade-up" data-aos-duration="1000">
                <h1>Here are some various games played in <br> <span style="color:#e0501b">Esports</span> </h1>
            </div>
            <div class="infoCards">
                <div class="card one" data-aos="fade-up" data-aos-duration="1000">
                    <div class="cardbgone"></div>
                    <div class="cardContent">
                        <h2>BGMI</h2>
                        <p>Battle Grounds Mobile India</p>
                        <a href="bgmi_regist.html">
                            <div class="cardBtn">
                                <img src="img/next.png" alt="" class="cardIcon">
                            </div>
                        </a>
                    </div>
                </div>
                
                <div class="card three" data-aos="fade-up" data-aos-duration="1600">
                    <div class="cardbgthree"></div>
                    <div class="cardContent">
                        <h2>CS:GO</h2>
                        <p>Counter-Strike: Global Offensive</p>
                        <a href="csgo_regist.html">
                            <div class="cardBtn">
                                <img src="img/next.png" alt="" class="cardIcon">
                            </div>
                        </a>
                    </div>
                </div>
                
            </div>
        </div>

        <!-- BANNER AND FOOTER -->

        <div class="footer">
            <h2>Esports.in</h2>
            <div class="footerlinks">
                <a href="#" class="mainlink">Home</a>
                <a href="#about">About</a>
                <a href="form.html">Registration</a>
            </div>
        </div>
    </div>

    <script src="https://unpkg.com/aos@2.3.1/dist/aos.js"></script>
    <script>
        AOS.init();
    </script>
</body>
</html>

